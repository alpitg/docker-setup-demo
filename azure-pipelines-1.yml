# Node.js with Angular
# Build a Node.js project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'


variables:
  dockerRegistryServiceConnection: '0815e4b2-605f-43f4-a639-ec8491ecb71a'
  # imageRepository: 'trackcops'
  imageRepository: 'trackcopsangular'
  containerRegistry: 'trackCopsRegistry'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'trackcopsregistry1620db6e-auth'

stages:
  # - stage: build_apps
  #   jobs:
  #     - job: frontend_build
  #       steps:
      
  #       - task: Npm@1
  #         displayName: npm install
  #         inputs:
  #           command: 'install'

  #       - task: Npm@1
  #         displayName: npm build
  #         inputs:
  #           command: 'custom'
  #           customCommand: 'run build'

  #       - task: ArchiveFiles@2
  #         displayName: Archive file
  #         inputs:
  #           rootFolderOrFile: 'dist/track-cops'
  #           includeRootFolder: false
  #           archiveType: 'zip'
  #           archiveFile: '$(Build.ArtifactStagingDirectory)/dist.zip'
  #           replaceExistingArchive: true

  #       - task: PublishBuildArtifacts@1
  #         displayName: Publish Artifacts
  #         inputs:
  #           PathtoPublish: '$(Build.ArtifactStagingDirectory)'
  #           ArtifactName: 'drop'
  #           publishLocation: 'Container'


  # - stage: integration
  #   dependsOn: build_apps
  #   jobs: 
  #     - job: A


  - stage: publish_docker
    # dependsOn: build_apps
    jobs: 
      - job: DockerImageBuild
        steps:
        - task: Docker@2
          displayName: Build and push an image to container registry
          inputs:
            containerRegistry: $(containerRegistry)
            repository: $(imageRepository)
            command: 'buildAndPush'
            dockerfile: $(dockerfilePath)
            tags: |
              $(tag)

        # - task: CopyFiles@2
        #   inputs:
        #     Contents: 'azure-pipelines-1.yml'
        #     TargetFolder: '$(Build.ArtifactStagingDirectory)'

        - task: CopyFiles@2
          inputs:
            Contents: '**'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'

        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'


        # - task: PublishPipelineArtifact@1
        #   inputs:
        #     targetPath: '$(Pipeline.Workspace)'
        #     artifact: 'manifests'
        #     publishLocation: 'pipeline'
          

        # - task: PublishPipelineArtifact@1
        #   inputs:
        #     artifactName: 'manifests'
        #     path: 'manifests'

        # - upload: manifests
        #   artifact: manifests
          

  - stage: deploy
    dependsOn: publish_docker
    jobs:
    - deployment: Deploy
      displayName: Deploy
      environment: 'trackcopsangular.default'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: KubernetesManifest@0
                displayName: Create imagePullSecret
                inputs:
                  action: createSecret
                  secretName: $(imagePullSecret)
                  dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
                  
              - task: KubernetesManifest@0
                displayName: Deploy to Kubernetes cluster
                inputs:
                  action: deploy
                  
                    # $(Pipeline.Workspace)/manifests/deployment.yml
                    # $(Pipeline.Workspace)/manifests/service.yml

                  manifests: |
                     $(Pipeline.Workspace)/drop/manifests/deployment.yml
                     $(Pipeline.Workspace)/drop/manifests/service.yml
                  imagePullSecrets: |
                    $(imagePullSecret)
                  containers: |
                    $(containerRegistry)/$(imageRepository):$(tag)




